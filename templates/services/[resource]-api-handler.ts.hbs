import { NextRequest, NextResponse } from 'next/server';
import { StatusCodes } from 'http-status-codes';
import { logger } from '@/utils/logger';

export interface AuthInfo {
sessionId: string;
token: string;
userInfo?: {
id: string;
email?: string;
name?: string;
};
}

/**
* Authentication middleware for {{pascalCase resourceName}} API routes
*/
export async function withAuthenticationAsync<T>(
    handler: (auth: AuthInfo) => Promise<T>,
        request: NextRequest
        ): Promise<T | NextResponse> {
            try {
            // Extract session from cookies or headers
            const sessionId = request.cookies.get('session-id')?.value ||
            request.headers.get('X-Session-ID');

            if (!sessionId) {
            logger.warn('No session ID found in request');
            return NextResponse.json({
            success: false,
            message: 'Authentication required',
            error: 'NO_SESSION',
            }, { status: StatusCodes.UNAUTHORIZED });
            }

            // Extract authorization token
            const authHeader = request.headers.get('Authorization');
            const token = authHeader?.replace('Bearer ', '') || '';

            if (!token) {
            logger.warn('No authorization token found in request');
            return NextResponse.json({
            success: false,
            message: 'Authorization token required',
            error: 'NO_TOKEN',
            }, { status: StatusCodes.UNAUTHORIZED });
            }

            // TODO: Validate session and token with auth service
            // For now, we'll pass through with the extracted values
            const authInfo: AuthInfo = {
            sessionId,
            token,
            userInfo: {
            id: 'user-id', // This should come from token validation
            },
            };

            // Call the handler with auth info
            return await handler(authInfo);

            } catch (error) {
            logger.error('Authentication error:', error);
            return NextResponse.json({
            success: false,
            message: 'Authentication failed',
            error: 'AUTH_ERROR',
            }, { status: StatusCodes.UNAUTHORIZED });
            }
            }

            /**
            * Create standardized error response
            */
            export async function createErrorResponseAsync(
            error: any,
            defaultMessage: string
            ): Promise<NextResponse> {
                logger.error(defaultMessage, error);

                // Handle Axios errors from API client
                if (error.response) {
                const status = error.response.status || StatusCodes.INTERNAL_SERVER_ERROR;
                const data = error.response.data;

                // If the API already returns a structured error, use it
                if (data && typeof data === 'object') {
                return NextResponse.json({
                success: false,
                message: data.message || defaultMessage,
                error: data.error || 'API_ERROR',
                details: data.details,
                }, { status });
                }

                // Otherwise, create a structured error
                return NextResponse.json({
                success: false,
                message: error.response.statusText || defaultMessage,
                error: 'API_ERROR',
                status,
                }, { status });
                }

                // Handle network errors
                if (error.request) {
                return NextResponse.json({
                success: false,
                message: 'Service unavailable',
                error: 'NETWORK_ERROR',
                }, { status: StatusCodes.SERVICE_UNAVAILABLE });
                }

                // Handle validation errors
                if (error.name === 'ValidationError') {
                return NextResponse.json({
                success: false,
                message: 'Validation failed',
                error: 'VALIDATION_ERROR',
                details: error.details || error.message,
                }, { status: StatusCodes.BAD_REQUEST });
                }

                // Default error response
                return NextResponse.json({
                success: false,
                message: defaultMessage,
                error: 'INTERNAL_ERROR',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined,
                }, { status: StatusCodes.INTERNAL_SERVER_ERROR });
                }

                /**
                * Validate request parameters
                */
                export function validateParams(
                params: Record<string, any>,
                required: string[]
                ): { valid: boolean; missing?: string[] } {
                const missing = required.filter(key => !params[key]);

                if (missing.length > 0) {
                return { valid: false, missing };
                }

                return { valid: true };
                }

                /**
                * Parse and validate pagination parameters
                */
                export function parsePaginationParams(searchParams: URLSearchParams) {
                const page = Math.max(0, parseInt(searchParams.get('page') || '0', 10));
                const size = Math.min(100, Math.max(1, parseInt(searchParams.get('size') || '10', 10)));
                const sortBy = searchParams.get('sortBy') || 'id';
                const sortDir = (searchParams.get('sortDir') || 'asc').toLowerCase() as 'asc' | 'desc';

                return { page, size, sortBy, sortDir };
                }