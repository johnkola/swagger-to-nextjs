# Deployment Guide

This guide covers deploying {{title}} to various platforms.

## Prerequisites

Before deploying, ensure you have:

1. Built the application successfully with `npm run build`
2. Set up all required environment variables
3. Tested the application locally

## Environment Variables

Ensure the following environment variables are set in your deployment environment:

```bash
# Required
NEXT_PUBLIC_API_URL=https://your-api-url.com

# Optional
NEXT_PUBLIC_DEFAULT_THEME=light
NEXT_PUBLIC_AVAILABLE_THEMES=light,dark,cupcake,corporate
```

## Deployment Platforms

### Vercel

Vercel is the recommended platform for Next.js applications.

#### One-Click Deploy

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=your-repo-url)

#### Manual Deploy

1. Install Vercel CLI:
```bash
npm i -g vercel
```

2. Deploy:
```bash
vercel
```

3. Follow the prompts to configure your deployment

#### GitHub Integration

1. Import your repository on [Vercel](https://vercel.com)
2. Configure environment variables
3. Deploy automatically on every push

### Netlify

1. Build command: `npm run build`
2. Publish directory: `.next`
3. Add environment variables in Netlify dashboard

```toml
# netlify.toml
[build]
command = "npm run build"
publish = ".next"

[[plugins]]
package = "@netlify/plugin-nextjs"
```

### Docker

#### Build Image

```bash
docker build -t {{projectName}} .
```

#### Run Container

```bash
docker run -p 3000:3000 \
-e NEXT_PUBLIC_API_URL=https://your-api-url.com \
{{projectName}}
```

#### Docker Compose

```bash
docker-compose up -d
```

For production:
```bash
docker-compose -f docker-compose.prod.yml up -d
```

### AWS

#### AWS Amplify

1. Connect your repository to AWS Amplify
2. Use the following build settings:

```yaml
version: 1
frontend:
phases:
preBuild:
commands:
- npm ci
build:
commands:
- npm run build
artifacts:
baseDirectory: .next
files:
- '**/*'
cache:
paths:
- node_modules/**/*
```

#### AWS Lambda (Serverless)

Deploy using the Serverless Framework:

```bash
npm install -g serverless
serverless deploy
```

### Google Cloud Platform

#### Cloud Run

1. Build container:
```bash
gcloud builds submit --tag gcr.io/PROJECT_ID/{{projectName}}
```

2. Deploy:
```bash
gcloud run deploy --image gcr.io/PROJECT_ID/{{projectName}} --platform managed
```

### Kubernetes

1. Apply configurations:
```bash
kubectl apply -f kubernetes/
```

2. Check deployment:
```bash
kubectl get pods
kubectl get services
```

## Post-Deployment Checklist

- [ ] Verify all environment variables are set correctly
- [ ] Test all API endpoints
- [ ] Check theme switching functionality
- [ ] Verify responsive design on mobile devices
- [ ] Test authentication (if applicable)
- [ ] Set up monitoring and error tracking
- [ ] Configure custom domain and SSL
- [ ] Set up CDN for static assets
- [ ] Enable CORS if needed
- [ ] Test performance with Lighthouse

## Performance Optimization

### Image Optimization

Next.js automatically optimizes images. Ensure your CDN is configured to cache these optimized images.

### Static Generation

Pages that don't require real-time data can be statically generated:

```typescript
export async function getStaticProps() {
// Fetch data at build time
return {
props: {},
revalidate: 3600 // Revalidate every hour
}
}
```

### Edge Functions

For better performance, consider using Edge Functions for API routes:

```typescript
export const config = {
runtime: 'edge',
}
```

## Monitoring

### Recommended Services

- **Vercel Analytics** - Built-in analytics for Vercel deployments
- **Sentry** - Error tracking and performance monitoring
- **LogRocket** - Session replay and logging
- **Datadog** - Application performance monitoring

### Health Check Endpoint

The application includes a health check endpoint at `/api/health`:

```bash
curl https://your-domain.com/api/health
```

## Rollback Procedures

### Vercel

```bash
vercel rollback
```

### Docker

```bash
# List previous images
docker images

# Run previous version
docker run -p 3000:3000 {{projectName}}:previous-tag
```

### Kubernetes

```bash
kubectl rollout undo deployment/{{projectName}}
```

## Troubleshooting

### Common Issues

1. **Environment variables not loading**
- Ensure variables are prefixed with `NEXT_PUBLIC_` for client-side access
- Restart the application after changing environment variables

2. **Build failures**
- Check Node.js version matches requirements (18+)
- Clear cache: `rm -rf .next node_modules`
- Reinstall dependencies: `npm install`

3. **API connection issues**
- Verify `NEXT_PUBLIC_API_URL` is correct
- Check CORS configuration on API server
- Ensure API is accessible from deployment environment

4. **Theme not persisting**
- Check browser localStorage is not blocked
- Verify theme switching code is running client-side

## Security Considerations

1. **Environment Variables**
- Never commit `.env.local` files
- Use deployment platform's secret management
- Rotate API keys regularly

2. **Headers**
- Set security headers in `next.config.js`
- Enable HSTS for HTTPS
- Configure CSP appropriately

3. **Authentication**
- Use secure session management
- Implement proper CSRF protection
- Enable rate limiting on API routes

## Support

For deployment issues:
1. Check the [Next.js deployment documentation](https://nextjs.org/docs/deployment)
2. Review platform-specific documentation
3. Open an issue in the repository

---

Generated with swagger-to-nextjs