{{!-- Imports Partial Template --}}
{{!-- This template provides consistent import statements across all generated files --}}

{{#if isServerSide}}
// Next.js Server-side imports
import { NextRequest, NextResponse } from 'next/server';
{{#if hasParams}}
import { headers } from 'next/headers';
{{/if}}
{{/if}}

{{#if isClientSide}}
// React imports
import { useState, useEffect, useCallback, useMemo{{#if hasContext}}, useContext{{/if}} } from 'react';
{{#if hasRouter}}
import { useRouter{{#if hasSearchParams}}, useSearchParams{{/if}} } from 'next/navigation';
{{/if}}
{{/if}}

{{#if hasValidation}}
// Validation imports
import { z } from 'zod';
{{#if hasCustomValidation}}
import { validateRequest, validateResponse } from '@/lib/validation';
{{/if}}
{{/if}}

{{#if hasAuthentication}}
// Authentication imports
{{#if isServerSide}}
import { verifyToken, getServerSession } from '@/lib/auth/server';
{{#if hasRoles}}
import { checkPermissions, type UserRole } from '@/lib/auth/permissions';
{{/if}}
{{else}}
import { useAuth } from '@/hooks/useAuth';
{{#if hasRoles}}
import { usePermissions } from '@/hooks/usePermissions';
{{/if}}
{{/if}}
{{/if}}

{{#if hasDatabase}}
// Database imports
{{#if (eq databaseType 'prisma')}}
import { prisma } from '@/lib/database/prisma';
{{#if hasTransactions}}
import { withTransaction } from '@/lib/database/transactions';
{{/if}}
{{else if (eq databaseType 'mongoose')}}
import { connectDB } from '@/lib/database/mongoose';
import { {{pascalCaseModel}} } from '@/models/{{pascalCaseModel}}';
{{else if (eq databaseType 'drizzle')}}
import { db } from '@/lib/database/drizzle';
import { {{camelCaseTable}} } from '@/lib/database/schema';
{{else}}
import { db } from '@/lib/database';
{{/if}}
{{/if}}

{{#if hasExternalApis}}
// External API imports
{{#each externalApis}}
import { {{camelCaseName}}Client } from '@/lib/clients/{{kebabCaseName}}';
{{/each}}
{{#if hasRetry}}
import { withRetry } from '@/lib/utils/retry';
{{/if}}
{{/if}}

{{#if hasCaching}}
// Caching imports
{{#if isServerSide}}
import { unstable_cache } from 'next/cache';
{{#if hasRedis}}
import { redis } from '@/lib/cache/redis';
{{/if}}
{{else}}
import { useQueryCache } from '@/hooks/useQueryCache';
{{#if hasSWR}}
import useSWR from 'swr';
{{else if hasReactQuery}}
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
{{/if}}
{{/if}}
{{/if}}

{{#if hasFileUpload}}
// File handling imports
{{#if isServerSide}}
import { writeFile, mkdir } from 'fs/promises';
import { join } from 'path';
{{#if hasS3}}
import { uploadToS3, deleteFromS3 } from '@/lib/storage/s3';
{{/if}}
{{#if hasCloudinary}}
import { uploadToCloudinary } from '@/lib/storage/cloudinary';
{{/if}}
{{else}}
import { useFileUpload } from '@/hooks/useFileUpload';
{{/if}}
{{/if}}

{{#if hasEmail}}
// Email service imports
{{#if (eq emailProvider 'resend')}}
import { resend } from '@/lib/email/resend';
{{else if (eq emailProvider 'sendgrid')}}
import { sendgrid } from '@/lib/email/sendgrid';
{{else if (eq emailProvider 'nodemailer')}}
import { transporter } from '@/lib/email/nodemailer';
{{else}}
import { emailService } from '@/lib/email';
{{/if}}
{{/if}}

{{#if hasWebhooks}}
// Webhook imports
import { verifyWebhookSignature } from '@/lib/webhooks/verification';
{{#if hasQueue}}
import { queueWebhookEvent } from '@/lib/queue/webhook-processor';
{{/if}}
{{/if}}

{{#if hasLogging}}
// Logging imports
{{#if (eq loggingProvider 'winston')}}
import { logger } from '@/lib/logging/winston';
{{else if (eq loggingProvider 'pino')}}
import { logger } from '@/lib/logging/pino';
{{else}}
import { logger } from '@/lib/logging';
{{/if}}
{{/if}}

{{#if hasMetrics}}
// Monitoring imports
{{#if (eq metricsProvider 'prometheus')}}
import { metrics } from '@/lib/monitoring/prometheus';
{{else if (eq metricsProvider 'datadog')}}
import { metrics } from '@/lib/monitoring/datadog';
{{else}}
import { metrics } from '@/lib/monitoring';
{{/if}}
{{/if}}

{{#if hasRateLimiting}}
// Rate limiting imports
{{#if isServerSide}}
import { rateLimit } from '@/lib/rate-limit';
{{#if (eq rateLimitProvider 'upstash')}}
import { redis } from '@upstash/redis';
{{/if}}
{{/if}}
{{/if}}

{{#if hasQueue}}
// Queue/Job imports
{{#if (eq queueProvider 'bull')}}
import { Queue } from 'bull';
{{else if (eq queueProvider 'bee')}}
import Bee from 'bee-queue';
{{else if (eq queueProvider 'agenda')}}
import { Agenda } from 'agenda';
{{/if}}
{{/if}}

{{#if hasSearch}}
// Search imports
{{#if (eq searchProvider 'elasticsearch')}}
import { elasticsearch } from '@/lib/search/elasticsearch';
{{else if (eq searchProvider 'algolia')}}
import { algolia } from '@/lib/search/algolia';
{{else if (eq searchProvider 'meilisearch')}}
import { meilisearch } from '@/lib/search/meilisearch';
{{/if}}
{{/if}}

{{#if hasPayments}}
// Payment imports
{{#if (eq paymentProvider 'stripe')}}
import { stripe } from '@/lib/payments/stripe';
{{else if (eq paymentProvider 'paypal')}}
import { paypal } from '@/lib/payments/paypal';
{{/if}}
{{/if}}

{{#if isClientSide}}
{{#if hasUI}}
// UI Component imports
{{#if (eq uiLibrary 'shadcn')}}
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
{{#if hasForm}}
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
{{/if}}
{{#if hasDialog}}
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
{{/if}}
{{#if hasToast}}
import { useToast } from '@/components/ui/use-toast';
{{/if}}
{{else if (eq uiLibrary 'chakra')}}
import { Box, Button, Input, Card, CardBody, CardHeader, Heading } from '@chakra-ui/react';
{{#if hasToast}}
import { useToast } from '@chakra-ui/react';
{{/if}}
{{else if (eq uiLibrary 'mantine')}}
import { Button, TextInput, Card, Group, Stack } from '@mantine/core';
{{#if hasToast}}
import { notifications } from '@mantine/notifications';
{{/if}}
{{/if}}
{{/if}}

{{#if hasForm}}
// Form handling imports
{{#if (eq formLibrary 'react-hook-form')}}
import { useForm } from 'react-hook-form';
{{#if hasValidation}}
import { zodResolver } from '@hookform/resolvers/zod';
{{/if}}
{{else if (eq formLibrary 'formik')}}
import { useFormik } from 'formik';
{{/if}}
{{/if}}

{{#if hasTable}}
// Table imports
{{#if (eq tableLibrary 'tanstack-table')}}
import { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table';
{{else if (eq tableLibrary 'react-table')}}
import { useTable, usePagination, useSortBy } from 'react-table';
{{/if}}
{{/if}}
{{/if}}

{{#if hasTypes}}
// Type imports
{{#if hasCustomTypes}}
{{#each customTypes}}
import type { {{name}} } from '@/types/{{kebabCaseName}}';
{{/each}}
{{/if}}
{{#if hasApiTypes}}
import type {
  {{#each apiTypes}}
  {{name}}{{#unless @last}},{{/unless}}
  {{/each}}
} from '@/types/api';
{{/if}}
{{#if hasSharedTypes}}
import type { ApiResponse, PaginatedResponse, ErrorResponse } from '@/types/common';
{{/if}}
{{/if}}

{{#if hasUtils}}
// Utility imports
{{#each utils}}
import { {{name}} } from '@/lib/utils/{{kebabCaseName}}';
{{/each}}
{{#if hasConstants}}
import { API_ENDPOINTS, HTTP_STATUS } from '@/lib/constants';
{{/if}}
{{#if hasHelpers}}
import { formatDate, formatCurrency, slugify } from '@/lib/helpers';
{{/if}}
{{/if}}

{{#if hasConfig}}
// Configuration imports
import { config } from '@/config';
{{#if hasEnv}}
import { env } from '@/env';
{{/if}}
{{/if}}

{{#if hasErrorHandling}}
// Error handling imports
import {
  ApiError,
  ValidationError,
  NotFoundError,
  AuthenticationError,
  handleApiError,
  withErrorHandling
} from '@/lib/errors';
{{/if}}

// Generated schema imports for this operation
{{#if hasRequestSchema}}
import { {{camelCaseOperationId}}RequestSchema } from './schemas/request';
{{/if}}
{{#if hasResponseSchema}}
import { {{camelCaseOperationId}}ResponseSchema } from './schemas/response';
{{/if}}
{{#if hasParamsSchema}}
import { {{camelCaseOperationId}}ParamsSchema } from './schemas/params';
{{/if}}

{{#if isClientSide}}
// Fetch logic import
import { {{camelCaseOperationId}}, use{{pascalCaseOperationId}} } from './fetch-logic';
{{/if}}

{{#if hasTestingUtils}}
// Testing utilities (development only)
{{#if isDevelopment}}
import { mockData } from '@/lib/testing/mocks';
import { generateTestData } from '@/lib/testing/generators';
{{/if}}
{{/if}}

{{#if hasMiddleware}}
// Middleware imports
{{#each middlewares}}
import { {{camelCaseName}} } from '@/middleware/{{kebabCaseName}}';
{{/each}}
{{/if}}

{{#if hasSecurity}}
// Security imports
{{#if hasCSRF}}
import { verifyCSRFToken } from '@/lib/security/csrf';
{{/if}}
{{#if hasEncryption}}
import { encrypt, decrypt } from '@/lib/security/encryption';
{{/if}}
{{#if hasSanitization}}
import { sanitizeInput } from '@/lib/security/sanitization';
{{/if}}
{{/if}}

{{#if hasInternationalization}}
// Internationalization imports
{{#if isServerSide}}
import { getTranslations } from 'next-intl/server';
{{else}}
import { useTranslations } from 'next-intl';
{{/if}}
{{/if}}

{{#if hasAnalytics}}
// Analytics imports
{{#if (eq analyticsProvider 'google-analytics')}}
import { gtag } from '@/lib/analytics/gtag';
{{else if (eq analyticsProvider 'mixpanel')}}
import { mixpanel } from '@/lib/analytics/mixpanel';
{{else if (eq analyticsProvider 'amplitude')}}
import { amplitude } from '@/lib/analytics/amplitude';
{{/if}}
{{/if}}

{{#if hasNotifications}}
// Notification imports
{{#if isServerSide}}
{{#if (eq notificationProvider 'push')}}
import { sendPushNotification } from '@/lib/notifications/push';
{{/if}}
{{#if (eq notificationProvider 'sms')}}
import { sendSMS } from '@/lib/notifications/sms';
{{/if}}
{{else}}
import { useNotifications } from '@/hooks/useNotifications';
{{/if}}
{{/if}}

{{#if hasRealtimeFeatures}}
// Real-time imports
{{#if (eq realtimeProvider 'socket.io')}}
{{#if isServerSide}}
import { Server } from 'socket.io';
{{else}}
import { useSocket } from '@/hooks/useSocket';
{{/if}}
{{else if (eq realtimeProvider 'pusher')}}
{{#if isServerSide}}
import { pusher } from '@/lib/realtime/pusher';
{{else}}
import { usePusher } from '@/hooks/usePusher';
{{/if}}
{{else if (eq realtimeProvider 'supabase')}}
import { supabase } from '@/lib/supabase';
{{/if}}
{{/if}}

{{#if hasImageProcessing}}
// Image processing imports
{{#if (eq imageProvider 'sharp')}}
import sharp from 'sharp';
{{else if (eq imageProvider 'jimp')}}
import Jimp from 'jimp';
{{/if}}
{{/if}}

{{#if hasScheduling}}
// Scheduling imports
{{#if (eq schedulingProvider 'node-cron')}}
import cron from 'node-cron';
{{else if (eq schedulingProvider 'agenda')}}
import { agenda } from '@/lib/scheduling/agenda';
{{/if}}
{{/if}}

{{#if hasGeolocation}}
// Geolocation imports
{{#if hasGeoIP}}
import { getLocationFromIP } from '@/lib/geo/ip-location';
{{/if}}
{{#if hasGeoDistance}}
import { calculateDistance } from '@/lib/geo/distance';
{{/if}}
{{/if}}

{{#if hasDataExport}}
// Data export imports
{{#if hasCSVExport}}
import { generateCSV } from '@/lib/export/csv';
{{/if}}
{{#if hasPDFExport}}
import { generatePDF } from '@/lib/export/pdf';
{{/if}}
{{#if hasExcelExport}}
import { generateExcel } from '@/lib/export/excel';
{{/if}}
{{/if}}

{{#if hasCompression}}
// Compression imports
{{#if (eq compressionProvider 'zlib')}}
import { gzip, gunzip } from 'zlib';
import { promisify } from 'util';
{{/if}}
{{/if}}

{{#if hasHealthCheck}}
// Health check imports
import { checkDatabaseHealth } from '@/lib/health/database';
import { checkExternalServices } from '@/lib/health/services';
{{/if}}

{{#if hasVersioning}}
// API versioning imports
import { getApiVersion, validateVersion } from '@/lib/versioning';
{{/if}}

{{#if hasDocumentation}}
// Documentation imports (development only)
{{#if isDevelopment}}
import { generateSwaggerDoc } from '@/lib/docs/swagger';
import { generateTypeDocs } from '@/lib/docs/types';
{{/if}}
{{/if}}

{{#if hasCustomHooks}}
// Custom hooks imports
{{#each customHooks}}
import { {{name}} } from '@/hooks/{{kebabCaseName}}';
{{/each}}
{{/if}}

{{#if hasThirdPartyIntegrations}}
// Third-party service integrations
{{#each thirdPartyServices}}
{{#if (eq name 'slack')}}
import { slackClient } from '@/lib/integrations/slack';
{{else if (eq name 'discord')}}
import { discordClient } from '@/lib/integrations/discord';
{{else if (eq name 'twitter')}}
import { twitterClient } from '@/lib/integrations/twitter';
{{else if (eq name 'github')}}
import { githubClient } from '@/lib/integrations/github';
{{else}}
import { {{camelCaseName}}Client } from '@/lib/integrations/{{kebabCaseName}}';
{{/if}}
{{/each}}
{{/if}}

{{#if hasBackgroundJobs}}
// Background job imports
{{#if (eq jobProvider 'bull')}}
import { {{camelCaseOperationId}}Queue } from '@/jobs/{{kebabCaseOperationId}}-queue';
{{else if (eq jobProvider 'agenda')}}
import { scheduleJob } from '@/jobs/scheduler';
{{/if}}
{{/if}}

{{#if hasStreaming}}
// Streaming imports
{{#if isServerSide}}
import { Readable } from 'stream';
{{else}}
import { useStreaming } from '@/hooks/useStreaming';
{{/if}}
{{/if}}

{{#if hasMockData}}
// Mock data imports (development/testing only)
{{#if isDevelopment}}
import {
  mock{{pascalCaseOperationId}}Request,
  mock{{pascalCaseOperationId}}Response
} from '@/mocks/{{kebabCaseOperationId}}';
{{/if}}
{{/if}}

{{#if hasFeatureFlags}}
// Feature flag imports
{{#if (eq featureFlagProvider 'launchdarkly')}}
import { ldClient } from '@/lib/feature-flags/launchdarkly';
{{else if (eq featureFlagProvider 'split')}}
import { splitClient } from '@/lib/feature-flags/split';
{{else}}
import { featureFlags } from '@/lib/feature-flags';
{{/if}}
{{/if}}

{{#if hasAuditLogging}}
// Audit logging imports
import { logAuditEvent } from '@/lib/audit/logger';
import { AuditEventType } from '@/lib/audit/types';
{{/if}}

{{#if hasDataTransformation}}
// Data transformation imports
{{#each transformers}}
import { {{camelCaseName}}Transformer } from '@/lib/transformers/{{kebabCaseName}}';
{{/each}}
{{/if}}

// Operation-specific imports
{{#if hasOperationSpecificImports}}
{{#each operationSpecificImports}}
import { {{name}} } from '{{path}}';
{{/each}}
{{/if}}

// Environment-specific imports
{{#if isDevelopment}}
// Development-only imports
{{#if hasDevTools}}
import { devLogger } from '@/lib/dev/logger';
import { performanceMonitor } from '@/lib/dev/performance';
{{/if}}
{{#if hasDebugTools}}
import { debugInfo } from '@/lib/dev/debug';
{{/if}}
{{/if}}

{{#if isProduction}}
// Production-only imports
{{#if hasProductionMonitoring}}
import { productionMetrics } from '@/lib/monitoring/production';
{{/if}}
{{#if hasProductionLogging}}
import { productionLogger } from '@/lib/logging/production';
{{/if}}
{{/if}}

// Type-only imports (for better tree-shaking)
{{#if hasTypeOnlyImports}}
{{#each typeOnlyImports}}
import type { {{name}} } from '{{path}}';
{{/each}}
{{/if}}