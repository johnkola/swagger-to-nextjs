# ===AI PROMPT ==============================================================
# FILE: src/templates/files/pages/components.tsx.template
# VERSION: 2025-05-25 13:22:11
# ============================================================================
#
# AI GENERATION PROMPT:
# Generate React component templates for forms, data tables, modals, and
# navigation elements based on OpenAPI schemas and operations.
#
# ---
#
# ===PROMPT END ==============================================================
// Shared UI Components for API Pages
// Generated by Swagger to Next.js Generator

import React from 'react';

// Loading spinner component
export function LoadingSpinner({ size = 'md' }: { size?: 'sm' | 'md' | 'lg' }) {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-8 w-8',
    lg: 'h-12 w-12'
  };

  return (
    <div className="flex items-center justify-center py-8">
      <div className={`animate-spin rounded-full border-b-2 border-blue-600 ${sizeClasses[size]}`}></div>
      <span className="ml-3 text-gray-600">Loading...</span>
    </div>
  );
}

// Error display component
export function ErrorMessage({
  error,
  onRetry
}: {
  error: string;
  onRetry?: () => void;
}) {
  return (
    <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
      <div className="flex items-center">
        <div className="text-red-600 mr-3">⚠️</div>
        <div className="flex-1">
          <h3 className="text-red-800 font-semibold">Error</h3>
          <p className="text-red-700">{error}</p>
          {onRetry && (
            <button
              onClick={onRetry}
              className="mt-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded text-sm font-medium transition-colors"
            >
              Try Again
            </button>
          )}
        </div>
      </div>
    </div>
  );
}

// Success message component
export function SuccessMessage({ message }: { message: string }) {
  return (
    <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
      <div className="flex items-center">
        <div className="text-green-600 mr-3">✅</div>
        <div>
          <h3 className="text-green-800 font-semibold">Success</h3>
          <p className="text-green-700">{message}</p>
        </div>
      </div>
    </div>
  );
}

// Data display component
export function DataDisplay({
  data,
  title = 'Data',
  onRefresh
}: {
  data: any;
  title?: string;
  onRefresh?: () => void;
}) {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold text-gray-800">{title}</h2>
        {onRefresh && (
          <button
            onClick={onRefresh}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm font-medium transition-colors"
          >
            Refresh
          </button>
        )}
      </div>

      <div className="bg-gray-50 rounded-lg p-4 overflow-auto">
        <pre className="text-sm text-gray-800 whitespace-pre-wrap">
          {JSON.stringify(data, null, 2)}
        </pre>
      </div>
    </div>
  );
}

// Parameter display component
export function ParameterDisplay({
  parameters
}: {
  parameters: Array<{ name: string; value: string }>;
}) {
  return (
    <div className="bg-gray-50 p-4 rounded-lg mb-6">
      <h3 className="text-sm font-semibold text-gray-600 mb-2">Parameters:</h3>
      {parameters.map((param, index) => (
        <div key={index} className="text-sm text-gray-700">
          <span className="font-medium">{param.name}:</span>{' '}
          <code className="bg-gray-200 px-2 py-1 rounded">{param.value}</code>
        </div>
      ))}
    </div>
  );
}

// Method badge component
export function MethodBadge({ method }: { method: string }) {
  const methodStyles = {
    GET: 'bg-green-100 text-green-800',
    POST: 'bg-blue-100 text-blue-800',
    PUT: 'bg-orange-100 text-orange-800',
    DELETE: 'bg-red-100 text-red-800',
    PATCH: 'bg-purple-100 text-purple-800'
  };

  return (
    <span
      className={`inline-block px-2 py-1 text-xs font-medium rounded ${
        methodStyles[method as keyof typeof methodStyles] || 'bg-gray-100 text-gray-800'
      }`}
    >
      {method}
    </span>
  );
}

// API info panel component
export function ApiInfoPanel({
  endpoint,
  methods
}: {
  endpoint: string;
  methods: string[];
}) {
  return (
    <div className="mt-8 pt-6 border-t border-gray-200">
      <h3 className="text-lg font-semibold text-gray-800 mb-3">API Information</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
        <div>
          <span className="text-gray-600">Endpoint:</span>
          <code className="ml-2 bg-gray-100 px-2 py-1 rounded">{endpoint}</code>
        </div>
        <div>
          <span className="text-gray-600">Methods:</span>
          <div className="ml-2 inline-flex gap-1">
            {methods.map((method, index) => (
              <MethodBadge key={index} method={method} />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}