/**
 * ============================================================================
 * SWAGGER-TO-NEXTJS GENERATOR - CLI Module
 * ============================================================================
 * FILE: src/cli.js
 * VERSION: 2025-05-28 15:14:56
 * ============================================================================
 */

const { program } = require('commander');
const chalk = require('chalk');
const ora = require('ora');
const path = require('path');
const fs = require('fs');

class CLI {
    constructor(options = {}) {
        this.version = options.version || '1.0.0';
        this.workingDir = options.workingDir || process.cwd();
        this.isGlobal = options.isGlobal || false;
        this.spinner = ora();
    }

    /**
     * Run the CLI with arguments
     * @param {string[]} args - Command line arguments
     * @returns {Promise<number>} Exit code
     */
    async run(args) {
        try {
            // Setup commander
            program
                .name('swagger-to-nextjs')
                .version(this.version)
                .description('Generate Next.js API client and components from Swagger/OpenAPI specification')
                .argument('<source>', 'Swagger specification URL or file path')
                .argument('[output]', 'Output directory', './generated')
                .option('-c, --config <path>', 'Path to configuration file')
                .option('-t, --typescript', 'Generate TypeScript code (default: true)', true)
                .option('--no-typescript', 'Generate JavaScript code')
                .option('-w, --watch', 'Watch for changes and regenerate')
                .option('--api-client <type>', 'API client type (fetch, axios)', 'fetch')
                .option('--no-components', 'Skip component generation')
                .option('--no-hooks', 'Skip hooks generation')
                .option('--no-tests', 'Skip test generation')
                .option('--dry-run', 'Show what would be generated without writing files')
                .option('--clean', 'Clean output directory before generation')
                .option('--verbose', 'Enable verbose logging')
                .option('--silent', 'Disable all output except errors')
                .option('--concurrency <number>', 'Number of concurrent operations', '5')
                .option('--no-telemetry', 'Disable anonymous usage statistics')
                .action(async (source, output, options) => {
                    await this.generate(source, output, options);
                });

            // Parse arguments
            await program.parseAsync(['node', 'swagger-to-nextjs', ...args]);

            return 0;
        } catch (error) {
            this.handleError(error);
            return 1;
        }
    }

    /**
     * Generate Next.js code from Swagger
     * @param {string} source - Swagger source
     * @param {string} output - Output directory
     * @param {object} options - CLI options
     */
    async generate(source, output, options) {
        try {
            // Show banner unless silent
            if (!options.silent) {
                this.showBanner();
            }

            // For now, let's create a minimal working version
            console.log(chalk.cyan('\n📋 Generation Configuration:'));
            console.log(chalk.gray('─'.repeat(40)));
            console.log(`  Source: ${chalk.yellow(source)}`);
            console.log(`  Output: ${chalk.yellow(output)}`);
            console.log(`  TypeScript: ${chalk.yellow(options.typescript ? 'Yes' : 'No')}`);
            console.log(`  API Client: ${chalk.yellow(options.apiClient)}`);

            // Check if source exists or is a URL
            if (!source.startsWith('http://') && !source.startsWith('https://')) {
                if (!fs.existsSync(source)) {
                    throw new Error(`Source file not found: ${source}`);
                }
            }

            // Create output directory
            if (!options.dryRun) {
                fs.mkdirSync(output, { recursive: true });
            }

            this.spinner.start('Loading Swagger specification...');

            // Simulate loading
            await new Promise(resolve => setTimeout(resolve, 1000));

            // For now, let's create a simple example file to show it's working
            if (!options.dryRun) {
                const readmePath = path.join(output, 'README.md');
                const readmeContent = `# Generated Next.js API Client

This code was generated from: ${source}

## Configuration
- TypeScript: ${options.typescript}
- API Client: ${options.apiClient}
- Generated on: ${new Date().toISOString()}

## Next Steps
1. Install dependencies
2. Configure your API base URL
3. Start using the generated client

---
*Generated by swagger-to-nextjs v${this.version}*
`;
                fs.writeFileSync(readmePath, readmeContent);

                this.spinner.succeed('Generated README.md');
            }

            this.spinner.info('Note: Full code generation is not yet implemented.');

            console.log(chalk.green('\n✨ Generation complete!'));
            console.log(chalk.gray(`Output directory: ${output}`));

        } catch (error) {
            this.spinner.fail('Generation failed');
            throw error;
        }
    }

    /**
     * Show banner
     */
    showBanner() {
        console.log(chalk.cyan(`
╔═══════════════════════════════════════════════╗
║      Swagger to Next.js Generator v${this.version}      ║
╚═══════════════════════════════════════════════╝
        `));
    }

    /**
     * Show help
     */
    async showHelp() {
        program.help();
    }

    /**
     * Handle errors
     * @param {Error} error - Error to handle
     */
    handleError(error) {
        console.error(chalk.red('\n❌ Error:'), error.message);

        if (error.stack && (process.env.DEBUG || process.env.VERBOSE)) {
            console.error(chalk.gray('\nStack trace:'));
            console.error(chalk.gray(error.stack));
        }

        // Provide helpful suggestions
        if (error.message.includes('ENOENT')) {
            console.error(chalk.yellow('\n💡 The specified file was not found.'));
        } else if (error.message.includes('EACCES')) {
            console.error(chalk.yellow('\n💡 Permission denied. Check file permissions.'));
        } else if (error.message.includes('Module not found')) {
            console.error(chalk.yellow('\n💡 Dependencies may be missing. Run: npm install'));
        }
    }

    /**
     * Shutdown CLI
     */
    async shutdown() {
        console.log('CLI shutdown complete');
    }
}

module.exports = CLI;